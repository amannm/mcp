{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "IntelliJ IDEA",
          "version": "251.27812.49",
          "informationUri": "https://www.jetbrains.com?utm_source=product&utm_medium=link&utm_campaign=IU&utm_content=2025.1",
          "rules": [
            {
              "id": "DuplicatedCode",
              "name": "Duplicated code fragment"
            },
            {
              "id": "EmptyMethod",
              "name": "Empty method"
            },
            {
              "id": "OptionalUsedAsFieldOrParameterType",
              "name": "'Optional' used as field or parameter type"
            },
            {
              "id": "FieldCanBeLocal",
              "name": "Field can be local variable"
            },
            {
              "id": "BooleanMethodIsAlwaysInverted",
              "name": "Boolean method is always inverted"
            },
            {
              "id": "SameReturnValue",
              "name": "Method always returns the same value"
            },
            {
              "id": "UnusedReturnValue",
              "name": "Method can be made 'void'"
            },
            {
              "id": "SameParameterValue",
              "name": "Method parameter always has the same value"
            },
            {
              "id": "RedundantThrows",
              "name": "Redundant 'throws' clause"
            },
            {
              "id": "unused",
              "name": "Unused declaration"
            },
            {
              "id": "Convert2MethodRef",
              "name": "Lambda can be replaced with method reference"
            },
            {
              "id": "NullableProblems",
              "name": "@NotNull/@Nullable problems"
            },
            {
              "id": "MismatchedQueryAndUpdateOfCollection",
              "name": "Mismatched query and update of collection"
            },
            {
              "id": "ResultOfMethodCallIgnored",
              "name": "Result of method call ignored"
            },
            {
              "id": "resource",
              "name": "AutoCloseable used without 'try'-with-resources"
            },
            {
              "id": "NonAtomicOperationOnVolatileField",
              "name": "Non-atomic operation on 'volatile' field"
            },
            {
              "id": "DuplicateExpressions",
              "name": "Multiple occurrences of the same expression"
            },
            {
              "id": "SpellCheckingInspection",
              "name": "Typo"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "file:///Users/amannmalik/IdeaProjects/mcp/"
          }
        }
      ],
      "language": "en-US",
      "results": [
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 118-124"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/McpServlet.java"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 9,
                  "endLine": 118,
                  "endColumn": 51,
                  "charOffset": 5088,
                  "charLength": 42,
                  "snippet": {
                    "text": "resp.setStatus(HttpServletResponse.SC_OK);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 431-439"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 16,
                  "endLine": 432,
                  "endColumn": 7,
                  "charOffset": 18367,
                  "charLength": 23,
                  "snippet": {
                    "text": "String uri = rrr.uri();"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 89-95"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/McpServlet.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 13,
                  "endLine": 89,
                  "endColumn": 55,
                  "charOffset": 3634,
                  "charLength": 42,
                  "snippet": {
                    "text": "resp.setStatus(HttpServletResponse.SC_OK);"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 484-492"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 16,
                  "endLine": 485,
                  "endColumn": 7,
                  "charOffset": 20475,
                  "charLength": 22,
                  "snippet": {
                    "text": "String uri = sr.uri();"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 97-101"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/prompts/PromptCodec.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 9,
                  "endLine": 97,
                  "endColumn": 80,
                  "charOffset": 4220,
                  "charLength": 71,
                  "snippet": {
                    "text": "if (obj == null) throw new IllegalArgumentException(\"object required\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 69-73"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/tools/ToolCodec.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 80,
                  "charOffset": 2988,
                  "charLength": 71,
                  "snippet": {
                    "text": "if (obj == null) throw new IllegalArgumentException(\"object required\");"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyMethod",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "All implementations of this method are empty"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/util/ProgressListener.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 20,
                  "charOffset": 100,
                  "charLength": 10,
                  "snippet": {
                    "text": "onProgress"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "OptionalUsedAsFieldOrParameterType",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Optional<ServerCapability>' used as type for field 'capability'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/wire/RequestMethod.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 19,
                  "endLine": 26,
                  "endColumn": 45,
                  "charOffset": 1145,
                  "charLength": 26,
                  "snippet": {
                    "text": "Optional<ServerCapability>"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "FieldCanBeLocal",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Field can be converted to a local variable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 43,
                  "endLine": 41,
                  "endColumn": 59,
                  "charOffset": 1726,
                  "charLength": 16,
                  "snippet": {
                    "text": "requestProcessor"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "FieldCanBeLocal",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Field can be converted to a local variable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/McpClient.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 43,
                  "endLine": 47,
                  "endColumn": 59,
                  "charOffset": 2109,
                  "charLength": 16,
                  "snippet": {
                    "text": "requestProcessor"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'matches()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/auth/JwtTokenValidator.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 21,
                  "endLine": 101,
                  "endColumn": 28,
                  "charOffset": 4204,
                  "charLength": 7,
                  "snippet": {
                    "text": "matches"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'validateAccept()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 13,
                  "endLine": 261,
                  "endColumn": 27,
                  "charOffset": 9376,
                  "charLength": 14,
                  "snippet": {
                    "text": "validateAccept"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'isValid()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/security/OriginValidator.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 20,
                  "endLine": 16,
                  "endColumn": 27,
                  "charOffset": 458,
                  "charLength": 7,
                  "snippet": {
                    "text": "isValid"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'connected()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/McpClient.java"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 20,
                  "endLine": 275,
                  "endColumn": 29,
                  "charOffset": 11595,
                  "charLength": 9,
                  "snippet": {
                    "text": "connected"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'canAccessResource()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 21,
                  "endLine": 356,
                  "endColumn": 38,
                  "charOffset": 15515,
                  "charLength": 17,
                  "snippet": {
                    "text": "canAccessResource"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'verifyOrigin()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 13,
                  "endLine": 253,
                  "endColumn": 25,
                  "charOffset": 9089,
                  "charLength": 12,
                  "snippet": {
                    "text": "verifyOrigin"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'validateSession()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 13,
                  "endLine": 282,
                  "endColumn": 28,
                  "charOffset": 10179,
                  "charLength": 15,
                  "snippet": {
                    "text": "validateSession"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'isVisibleAscii()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/validation/InputSanitizer.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 27,
                  "endLine": 10,
                  "endColumn": 41,
                  "charOffset": 189,
                  "charLength": 14,
                  "snippet": {
                    "text": "isVisibleAscii"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'samplingAccess()' always returns 'com.amannmalik.mcp.security.SamplingAccessPolicy.PERMISSIVE'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/ServerDefaults.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 40,
                  "endLine": 58,
                  "endColumn": 54,
                  "charOffset": 2548,
                  "charLength": 14,
                  "snippet": {
                    "text": "samplingAccess"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'toJsonObject()' always returns 'jakarta.json.JsonValue.EMPTY_JSON_OBJECT'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/util/EmptyJsonObjectCodec.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 30,
                  "endLine": 10,
                  "endColumn": 42,
                  "charOffset": 213,
                  "charLength": 12,
                  "snippet": {
                    "text": "toJsonObject"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "All implementations of method 'jsonrpc()' always return 'com.amannmalik.mcp.jsonrpc.JsonRpc.VERSION'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/jsonrpc/JsonRpcMessage.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 12,
                  "endLine": 4,
                  "endColumn": 19,
                  "charOffset": 164,
                  "charLength": 7,
                  "snippet": {
                    "text": "jsonrpc"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'failForMissingSession()' always returns 'false'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/SessionManager.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 21,
                  "endLine": 95,
                  "endColumn": 42,
                  "charOffset": 3762,
                  "charLength": 21,
                  "snippet": {
                    "text": "failForMissingSession"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "All implementations of method 'allow()' always return 'true'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/security/SecurityPolicy.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 13,
                  "endLine": 6,
                  "endColumn": 18,
                  "charOffset": 129,
                  "charLength": 5,
                  "snippet": {
                    "text": "allow"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'createSession()' always returns 'true'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/SessionManager.java"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 21,
                  "endLine": 83,
                  "endColumn": 34,
                  "charOffset": 3275,
                  "charLength": 13,
                  "snippet": {
                    "text": "createSession"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'toolAccess()' always returns 'com.amannmalik.mcp.security.ToolAccessPolicy.PERMISSIVE'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/ServerDefaults.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 36,
                  "endLine": 54,
                  "endColumn": 46,
                  "charOffset": 2443,
                  "charLength": 10,
                  "snippet": {
                    "text": "toolAccess"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Return value of the method is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/tools/ToolCodec.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 47,
                  "endLine": 53,
                  "endColumn": 76,
                  "charOffset": 2210,
                  "charLength": 29,
                  "snippet": {
                    "text": "toToolListChangedNotification"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'compatibilityVersion' is always 'StreamableHttpTransport.COMPATIBILITY_VERSION'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/SessionManager.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 27,
                  "endLine": 24,
                  "endColumn": 47,
                  "charOffset": 860,
                  "charLength": 20,
                  "snippet": {
                    "text": "compatibilityVersion"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'cap' is always 'ClientCapability.ROOTS'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/RootsManager.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 59,
                  "endLine": 69,
                  "endColumn": 62,
                  "charOffset": 2273,
                  "charLength": 3,
                  "snippet": {
                    "text": "cap"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'b' is always 'ValueType.FALSE'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/validation/SchemaValidator.java"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 97,
                  "endLine": 139,
                  "endColumn": 98,
                  "charOffset": 5869,
                  "charLength": 1,
                  "snippet": {
                    "text": "b"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'timeoutMillis' is always 'Timeouts.DEFAULT_TIMEOUT_MS'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 79,
                  "endLine": 679,
                  "endColumn": 92,
                  "charOffset": 29134,
                  "charLength": 13,
                  "snippet": {
                    "text": "timeoutMillis"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'a' is always 'ValueType.TRUE'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/validation/SchemaValidator.java"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 74,
                  "endLine": 139,
                  "endColumn": 75,
                  "charOffset": 5846,
                  "charLength": 1,
                  "snippet": {
                    "text": "a"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'expected' is always 'LifecycleState.INIT'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/lifecycle/ProtocolLifecycle.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 45,
                  "endLine": 80,
                  "endColumn": 53,
                  "charOffset": 2721,
                  "charLength": 8,
                  "snippet": {
                    "text": "expected"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "RedundantThrows",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The declared exception 'IOException' is never thrown"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 66,
                  "endLine": 276,
                  "endColumn": 77,
                  "charOffset": 12625,
                  "charLength": 11,
                  "snippet": {
                    "text": "IOException"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "RedundantThrows",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The declared exception 'ServletException' is never thrown"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/McpServlet.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 84,
                  "endLine": 22,
                  "endColumn": 100,
                  "charOffset": 660,
                  "charLength": 16,
                  "snippet": {
                    "text": "ServletException"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "RedundantThrows",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The declared exception 'IOException' is never thrown in any method implementation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/jsonrpc/RpcHandlerRegistry.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 62,
                  "endLine": 55,
                  "endColumn": 73,
                  "charOffset": 2157,
                  "charLength": 11,
                  "snippet": {
                    "text": "IOException"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "RedundantThrows",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The declared exception 'IOException' is never thrown"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/SseClient.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 50,
                  "endLine": 62,
                  "endColumn": 61,
                  "charOffset": 1885,
                  "charLength": 11,
                  "snippet": {
                    "text": "IOException"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "RedundantThrows",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The declared exception 'InterruptedException' is never thrown in any method implementation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/sampling/SamplingProviderFactory.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 94,
                  "endLine": 29,
                  "endColumn": 114,
                  "charOffset": 1031,
                  "charLength": 20,
                  "snippet": {
                    "text": "InterruptedException"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "RedundantThrows",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The declared exception 'Exception' is never thrown in any method implementation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 57,
                  "endLine": 189,
                  "endColumn": 66,
                  "charOffset": 9090,
                  "charLength": 9,
                  "snippet": {
                    "text": "Exception"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "RedundantThrows",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The declared exception 'IOException' is never thrown"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/util/JsonRpcRequestProcessor.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 14,
                  "endLine": 42,
                  "endColumn": 25,
                  "charOffset": 1417,
                  "charLength": 11,
                  "snippet": {
                    "text": "IOException"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "unused",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter 'name' is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/validation/ElicitationSchemaValidator.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 70,
                  "endLine": 117,
                  "endColumn": 74,
                  "charOffset": 5358,
                  "charLength": 4,
                  "snippet": {
                    "text": "name"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "unused",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter 'timeoutMillis' is not used in any implementation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/sampling/SamplingProvider.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 76,
                  "endLine": 4,
                  "endColumn": 89,
                  "charOffset": 178,
                  "charLength": 13,
                  "snippet": {
                    "text": "timeoutMillis"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "Convert2MethodRef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Lambda can be replaced with method reference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/util/RootChecker.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 35,
                  "endLine": 36,
                  "endColumn": 62,
                  "charOffset": 963,
                  "charLength": 27,
                  "snippet": {
                    "text": "targetPath.startsWith(base)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "Convert2MethodRef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Lambda can be replaced with method reference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 56,
                  "endLine": 116,
                  "endColumn": 71,
                  "charOffset": 5857,
                  "charLength": 15,
                  "snippet": {
                    "text": "l.listChanged()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "Convert2MethodRef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Lambda can be replaced with method reference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 52,
                  "endLine": 123,
                  "endColumn": 67,
                  "charOffset": 6203,
                  "charLength": 15,
                  "snippet": {
                    "text": "l.listChanged()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "Convert2MethodRef",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Lambda can be replaced with method reference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 50,
                  "endLine": 130,
                  "endColumn": 65,
                  "charOffset": 6538,
                  "charLength": 15,
                  "snippet": {
                    "text": "l.listChanged()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "NullableProblems",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Not annotated method overrides method annotated with @NotNull"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/util/ProgressToken.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 23,
                  "endLine": 19,
                  "endColumn": 31,
                  "charOffset": 504,
                  "charLength": 8,
                  "snippet": {
                    "text": "toString"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "NullableProblems",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Not annotated method overrides method annotated with @NotNull"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/util/ProgressToken.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 23,
                  "endLine": 31,
                  "endColumn": 31,
                  "charOffset": 768,
                  "charLength": 8,
                  "snippet": {
                    "text": "toString"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "NullableProblems",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Not annotated method overrides method annotated with @NotNull"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/jsonrpc/RequestId.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 23,
                  "endLine": 26,
                  "endColumn": 31,
                  "charOffset": 837,
                  "charLength": 8,
                  "snippet": {
                    "text": "toString"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "NullableProblems",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Not annotated method overrides method annotated with @NotNull"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/jsonrpc/RequestId.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 23,
                  "endLine": 19,
                  "endColumn": 31,
                  "charOffset": 685,
                  "charLength": 8,
                  "snippet": {
                    "text": "toString"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "MismatchedQueryAndUpdateOfCollection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Contents of empty collection 'clientSpecs' are queried, but it's never populated"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/cli/HostCommand.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 26,
                  "endLine": 31,
                  "endColumn": 37,
                  "charOffset": 1129,
                  "charLength": 11,
                  "snippet": {
                    "text": "clientSpecs"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ResultOfMethodCallIgnored",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'BlockingQueue.offer()' is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 19,
                  "endLine": 178,
                  "endColumn": 24,
                  "charOffset": 6910,
                  "charLength": 5,
                  "snippet": {
                    "text": "offer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ResultOfMethodCallIgnored",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'BlockingQueue.offer()' is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 18,
                  "endLine": 298,
                  "endColumn": 23,
                  "charOffset": 10826,
                  "charLength": 5,
                  "snippet": {
                    "text": "offer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ResultOfMethodCallIgnored",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'BlockingQueue.offer()' is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/elicitation/BlockingElicitationProvider.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 19,
                  "endLine": 10,
                  "endColumn": 24,
                  "charOffset": 405,
                  "charLength": 5,
                  "snippet": {
                    "text": "offer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ResultOfMethodCallIgnored",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'URI.create()' is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/validation/SchemaValidator.java"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 35,
                  "endLine": 115,
                  "endColumn": 41,
                  "charOffset": 4897,
                  "charLength": 6,
                  "snippet": {
                    "text": "create"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'HttpClient' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/sampling/InteractiveSamplingProvider.java"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 40,
                  "endLine": 141,
                  "endColumn": 53,
                  "charOffset": 5774,
                  "charLength": 13,
                  "snippet": {
                    "text": "newHttpClient"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'StreamableHttpTransport' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/cli/ServerCommand.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 50,
                  "endLine": 93,
                  "endColumn": 73,
                  "charOffset": 3950,
                  "charLength": 23,
                  "snippet": {
                    "text": "StreamableHttpTransport"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'McpClient' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/security/HostProcess.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 21,
                  "endLine": 71,
                  "endColumn": 27,
                  "charOffset": 3087,
                  "charLength": 6,
                  "snippet": {
                    "text": "remove"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'SseClient' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 24,
                  "endLine": 184,
                  "endColumn": 30,
                  "charOffset": 7084,
                  "charLength": 6,
                  "snippet": {
                    "text": "remove"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'McpClient' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/security/HostProcess.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 36,
                  "endLine": 77,
                  "endColumn": 42,
                  "charOffset": 3231,
                  "charLength": 6,
                  "snippet": {
                    "text": "remove"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'SseClient' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 25,
                  "endLine": 185,
                  "endColumn": 31,
                  "charOffset": 7121,
                  "charLength": 6,
                  "snippet": {
                    "text": "remove"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'HttpClient' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/McpClient.java"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 31,
                  "endLine": 430,
                  "endColumn": 44,
                  "charOffset": 17597,
                  "charLength": 13,
                  "snippet": {
                    "text": "newHttpClient"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "NonAtomicOperationOnVolatileField",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Non-atomic operation on volatile field 'protocolVersion'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpClientTransport.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 9,
                  "endLine": 61,
                  "endColumn": 24,
                  "charOffset": 2422,
                  "charLength": 15,
                  "snippet": {
                    "text": "protocolVersion"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "NonAtomicOperationOnVolatileField",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Non-atomic operation on volatile field 'sessionId'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpClientTransport.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 9,
                  "endLine": 59,
                  "endColumn": 18,
                  "charOffset": 2323,
                  "charLength": 9,
                  "snippet": {
                    "text": "sessionId"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicateExpressions",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Multiple occurrences of 'line.substring(line.indexOf(':') + 1).trim()'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpClientTransport.java"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 37,
                  "endLine": 145,
                  "endColumn": 81,
                  "charOffset": 5671,
                  "charLength": 44,
                  "snippet": {
                    "text": "line.substring(line.indexOf(':') + 1).trim()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicateExpressions",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Multiple occurrences of 'line.substring(line.indexOf(':') + 1).trim()'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpClientTransport.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 35,
                  "endLine": 142,
                  "endColumn": 79,
                  "charOffset": 5466,
                  "charLength": 44,
                  "snippet": {
                    "text": "line.substring(line.indexOf(':') + 1).trim()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'ancel'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/elicitation/InteractiveElicitationProvider.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 30,
                  "endLine": 89,
                  "endColumn": 68,
                  "charOffset": 3700,
                  "charLength": 38,
                  "snippet": {
                    "text": "\"Action [a]ccept/[d]ecline/[c]ancel: \""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'ecline'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/elicitation/InteractiveElicitationProvider.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 30,
                  "endLine": 89,
                  "endColumn": 68,
                  "charOffset": 3700,
                  "charLength": 38,
                  "snippet": {
                    "text": "\"Action [a]ccept/[d]ecline/[c]ancel: \""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SpellCheckingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Typo: In word 'ccept'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/elicitation/InteractiveElicitationProvider.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 30,
                  "endLine": 89,
                  "endColumn": 68,
                  "charOffset": 3700,
                  "charLength": 38,
                  "snippet": {
                    "text": "\"Action [a]ccept/[d]ecline/[c]ancel: \""
                  }
                }
              }
            }
          ]
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}