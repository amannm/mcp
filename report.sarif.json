{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "IntelliJ IDEA",
          "version": "251.27812.49",
          "informationUri": "https://www.jetbrains.com?utm_source=product&utm_medium=link&utm_campaign=IU&utm_content=2025.1",
          "rules": [
            {
              "id": "DuplicatedCode",
              "name": "Duplicated code fragment"
            },
            {
              "id": "EmptyMethod",
              "name": "Empty method"
            },
            {
              "id": "UastIncorrectHttpHeaderInspection",
              "name": "Unknown HTTP header"
            },
            {
              "id": "BooleanMethodIsAlwaysInverted",
              "name": "Boolean method is always inverted"
            },
            {
              "id": "UnnecessaryLocalVariable",
              "name": "Redundant local variable"
            },
            {
              "id": "SameReturnValue",
              "name": "Method always returns the same value"
            },
            {
              "id": "SameParameterValue",
              "name": "Method parameter always has the same value"
            },
            {
              "id": "RedundantThrows",
              "name": "Redundant 'throws' clause"
            },
            {
              "id": "unused",
              "name": "Unused declaration"
            },
            {
              "id": "MismatchedQueryAndUpdateOfCollection",
              "name": "Mismatched query and update of collection"
            },
            {
              "id": "DataFlowIssue",
              "name": "Nullability and data flow problems"
            },
            {
              "id": "ResultOfMethodCallIgnored",
              "name": "Result of method call ignored"
            },
            {
              "id": "resource",
              "name": "AutoCloseable used without 'try'-with-resources"
            },
            {
              "id": "DuplicateBranchesInSwitch",
              "name": "Duplicate branches in 'switch'"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "file:///Users/amannmalik/IdeaProjects/mcp/"
          }
        }
      ],
      "language": "en-US",
      "results": [
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 308-326"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 20,
                  "endLine": 309,
                  "endColumn": 7,
                  "charOffset": 12308,
                  "charLength": 33,
                  "snippet": {
                    "text": "String session = sessionId.get();"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate code: lines 228-247"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 20,
                  "endLine": 229,
                  "endColumn": 7,
                  "charOffset": 9266,
                  "charLength": 33,
                  "snippet": {
                    "text": "String session = sessionId.get();"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyMethod",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "All implementations of this method are empty"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/util/ProgressListener.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 20,
                  "charOffset": 100,
                  "charLength": 10,
                  "snippet": {
                    "text": "onProgress"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyMethod",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "All implementations of this method are empty"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/logging/LoggingListener.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 19,
                  "charOffset": 109,
                  "charLength": 9,
                  "snippet": {
                    "text": "onMessage"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "UastIncorrectHttpHeaderInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unknown HTTP header"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 51,
                  "endLine": 38,
                  "endColumn": 73,
                  "charOffset": 1478,
                  "charLength": 22,
                  "snippet": {
                    "text": "\"MCP-Protocol-Version\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "UastIncorrectHttpHeaderInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unknown HTTP header"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 32,
                  "endLine": 152,
                  "endColumn": 48,
                  "charOffset": 5924,
                  "charLength": 16,
                  "snippet": {
                    "text": "\"Mcp-Session-Id\""
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'connected()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/McpClient.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 13,
                  "endLine": 16,
                  "endColumn": 22,
                  "charOffset": 366,
                  "charLength": 9,
                  "snippet": {
                    "text": "connected"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "BooleanMethodIsAlwaysInverted",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calls to boolean method 'isValid()' are always inverted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/security/OriginValidator.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 20,
                  "endLine": 15,
                  "endColumn": 27,
                  "charOffset": 437,
                  "charLength": 7,
                  "snippet": {
                    "text": "isValid"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryLocalVariable",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'negotiatedVersion' is redundant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/lifecycle/ProtocolLifecycle.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 16,
                  "endLine": 28,
                  "endColumn": 33,
                  "charOffset": 1077,
                  "charLength": 17,
                  "snippet": {
                    "text": "negotiatedVersion"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "All implementations of method 'jsonrpc()' always return 'com.amannmalik.mcp.jsonrpc.JsonRpc.VERSION'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/jsonrpc/JsonRpcMessage.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 12,
                  "endLine": 4,
                  "endColumn": 19,
                  "charOffset": 164,
                  "charLength": 7,
                  "snippet": {
                    "text": "jsonrpc"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameReturnValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "All implementations of method 'allow()' always return 'true'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/security/SecurityPolicy.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 13,
                  "endLine": 6,
                  "endColumn": 18,
                  "charOffset": 129,
                  "charLength": 5,
                  "snippet": {
                    "text": "allow"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'expected' is always 'LifecycleState.INIT'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/lifecycle/ProtocolLifecycle.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 45,
                  "endLine": 59,
                  "endColumn": 53,
                  "charOffset": 1894,
                  "charLength": 8,
                  "snippet": {
                    "text": "expected"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'principalId' is always '\"default\"'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 81,
                  "endLine": 723,
                  "endColumn": 92,
                  "charOffset": 33091,
                  "charLength": 11,
                  "snippet": {
                    "text": "principalId"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'b' is always 'ValueType.FALSE'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/validation/SchemaValidator.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 97,
                  "endLine": 121,
                  "endColumn": 98,
                  "charOffset": 6261,
                  "charLength": 1,
                  "snippet": {
                    "text": "b"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'a' is always 'ValueType.TRUE'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/validation/SchemaValidator.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 74,
                  "endLine": 121,
                  "endColumn": 75,
                  "charOffset": 6238,
                  "charLength": 1,
                  "snippet": {
                    "text": "a"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "SameParameterValue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Value of parameter 'cap' is always 'ServerCapability.LOGGING'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 59,
                  "endLine": 348,
                  "endColumn": 62,
                  "charOffset": 15571,
                  "charLength": 3,
                  "snippet": {
                    "text": "cap"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "RedundantThrows",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The declared exception 'IOException' is never thrown in any method implementation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/McpServer.java"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 62,
                  "endLine": 772,
                  "endColumn": 73,
                  "charOffset": 34563,
                  "charLength": 11,
                  "snippet": {
                    "text": "IOException"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "RedundantThrows",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The declared exception 'ServletException' is never thrown"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 88,
                  "endLine": 129,
                  "endColumn": 104,
                  "charOffset": 4841,
                  "charLength": 16,
                  "snippet": {
                    "text": "ServletException"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "unused",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter 'request' is not used in any implementation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/elicitation/ElicitationProvider.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 51,
                  "endLine": 5,
                  "endColumn": 58,
                  "charOffset": 138,
                  "charLength": 7,
                  "snippet": {
                    "text": "request"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "unused",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter 'request' is not used in any implementation"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/sampling/SamplingProvider.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 62,
                  "endLine": 4,
                  "endColumn": 69,
                  "charOffset": 164,
                  "charLength": 7,
                  "snippet": {
                    "text": "request"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "MismatchedQueryAndUpdateOfCollection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Contents of empty collection 'clientSpecs' are queried, but it's never populated"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/cli/HostCommand.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 26,
                  "endLine": 33,
                  "endColumn": 37,
                  "charOffset": 1245,
                  "charLength": 11,
                  "snippet": {
                    "text": "clientSpecs"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DataFlowIssue",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method invocation 'uri' may produce 'NullPointerException'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/server/resources/InMemoryResourceProvider.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 52,
                  "endLine": 59,
                  "endColumn": 55,
                  "charOffset": 2534,
                  "charLength": 3,
                  "snippet": {
                    "text": "uri"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ResultOfMethodCallIgnored",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'BlockingQueue.offer()' is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/elicitation/BlockingElicitationProvider.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 19,
                  "endLine": 12,
                  "endColumn": 24,
                  "charOffset": 518,
                  "charLength": 5,
                  "snippet": {
                    "text": "offer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ResultOfMethodCallIgnored",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'BlockingQueue.offer()' is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/transport/StreamableHttpTransport.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 23,
                  "endLine": 117,
                  "endColumn": 28,
                  "charOffset": 4479,
                  "charLength": 5,
                  "snippet": {
                    "text": "offer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ResultOfMethodCallIgnored",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'BlockingQueue.offer()' is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/client/sampling/BlockingSamplingProvider.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 19,
                  "endLine": 11,
                  "endColumn": 24,
                  "charOffset": 475,
                  "charLength": 5,
                  "snippet": {
                    "text": "offer"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "ResultOfMethodCallIgnored",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of 'URI.create()' is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/validation/SchemaValidator.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 44,
                  "endLine": 97,
                  "endColumn": 50,
                  "charOffset": 5269,
                  "charLength": 6,
                  "snippet": {
                    "text": "create"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'McpClient' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/security/HostProcess.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 21,
                  "endLine": 49,
                  "endColumn": 27,
                  "charOffset": 1840,
                  "charLength": 6,
                  "snippet": {
                    "text": "remove"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'McpClient' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/security/HostProcess.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 36,
                  "endLine": 55,
                  "endColumn": 42,
                  "charOffset": 1984,
                  "charLength": 6,
                  "snippet": {
                    "text": "remove"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'StreamableHttpTransport' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/cli/ServerCommand.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 50,
                  "endLine": 56,
                  "endColumn": 73,
                  "charOffset": 1998,
                  "charLength": 23,
                  "snippet": {
                    "text": "StreamableHttpTransport"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "resource",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'ExecutorService' used without 'try'-with-resources statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/ping/PingMonitor.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 42,
                  "endLine": 16,
                  "endColumn": 65,
                  "charOffset": 481,
                  "charLength": 23,
                  "snippet": {
                    "text": "newSingleThreadExecutor"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "DuplicateBranchesInSwitch",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicate branch in 'switch'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/com/amannmalik/mcp/lifecycle/LifecycleCodec.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 31,
                  "endLine": 66,
                  "endColumn": 58,
                  "charOffset": 2665,
                  "charLength": 27,
                  "snippet": {
                    "text": "b.add(\"listChanged\", true);"
                  }
                }
              }
            }
          ]
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}